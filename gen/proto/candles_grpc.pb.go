// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: candles.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CandleService_Subscribe_FullMethodName = "/candle.CandleService/Subscribe"
)

// CandleServiceClient is the client API for CandleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CandleService defines the gRPC service for streaming candles
type CandleServiceClient interface {
	// Subscribe initiates a streaming connection for receiving candle updates
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candle], error)
}

type candleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandleServiceClient(cc grpc.ClientConnInterface) CandleServiceClient {
	return &candleServiceClient{cc}
}

func (c *candleServiceClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candle], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CandleService_ServiceDesc.Streams[0], CandleService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequest, Candle]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CandleService_SubscribeClient = grpc.ServerStreamingClient[Candle]

// CandleServiceServer is the server API for CandleService service.
// All implementations must embed UnimplementedCandleServiceServer
// for forward compatibility.
//
// CandleService defines the gRPC service for streaming candles
type CandleServiceServer interface {
	// Subscribe initiates a streaming connection for receiving candle updates
	Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[Candle]) error
	mustEmbedUnimplementedCandleServiceServer()
}

// UnimplementedCandleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCandleServiceServer struct{}

func (UnimplementedCandleServiceServer) Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[Candle]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCandleServiceServer) mustEmbedUnimplementedCandleServiceServer() {}
func (UnimplementedCandleServiceServer) testEmbeddedByValue()                       {}

// UnsafeCandleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandleServiceServer will
// result in compilation errors.
type UnsafeCandleServiceServer interface {
	mustEmbedUnimplementedCandleServiceServer()
}

func RegisterCandleServiceServer(s grpc.ServiceRegistrar, srv CandleServiceServer) {
	// If the following call pancis, it indicates UnimplementedCandleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CandleService_ServiceDesc, srv)
}

func _CandleService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandleServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscriptionRequest, Candle]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CandleService_SubscribeServer = grpc.ServerStreamingServer[Candle]

// CandleService_ServiceDesc is the grpc.ServiceDesc for CandleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candle.CandleService",
	HandlerType: (*CandleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _CandleService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "candles.proto",
}
